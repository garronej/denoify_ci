name: ci
on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:

  test_node:
    runs-on: ubuntu-latest
    if: ${{ !github.event.created }}
    strategy:
      matrix:
        node: [ '13', '12', '11', '10', '8' ]
    name: Test with Node v${{ matrix.node }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node }}
    - run: npm install
    - run: npm run build
    - run: npm run test:node

  test_deno:
    runs-on: ubuntu-latest
    if: ${{ !github.event.created }}
    name: test with Deno
    steps: 

    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
    - name: Cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/deno
        key: deno-${{ runner.os }}-${{ hashFiles('deno-lock.json') }}
        restore-keys: |
           deno-${{ runner.os }}-${{ hashFiles('deno-lock.json') }}
           deno-${{ runner.os }}-
           deno-
    - uses: denolib/setup-deno@master
      with:
        deno-version: 0.x
    - run: npm install
    - run: npm run build
    - run: npm run test:deno

  trigger_publish:
    name: Trigger publish.yaml workflow if package.json version updated ( and secrets.PAT is set ).
    runs-on: ubuntu-latest
    env:
      PAT: ${{secrets.PAT}}
    if: github.event_name == 'push' && github.actor != 'denoify_ci'
    needs:
      - test_node
      - test_deno
    steps:

    - name: Get version on master
      id: v_master
      uses: garronej/github_actions_toolkit@master
      with: 
        action_name: get_package_json_version
        owner: ${{github.repository_owner}}
        repo: ${{github.event.repository.name}}
        branch: master

    - name: Get version on dev
      id: v_dev
      uses: garronej/github_actions_toolkit@master
      with: 
        action_name: get_package_json_version
        owner: ${{github.repository_owner}}
        repo: ${{github.event.repository.name}}
        branch: dev
    - name: Dump steps context
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
      run: echo "$STEPS_CONTEXT"

    - name: 'Trigger the ''publish'' workflow' 
      if: ${{ !!env.PAT && steps.v_master.outputs.version != steps.v_dev.outputs.version && steps.v_dev.outputs.version != '0.0.0' }}
      uses: garronej/github_actions_toolkit@master
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }} 
      with:
        action_name: dispatch_event
        owner: ${{github.repository_owner}}
        repo: ${{github.event.repository.name}}
        event_type: publish
        client_payload_json: |
          ${{
            format(
              '{{"from_version":"{0}","to_version":"{1}","repo":"{2}"}}',
              steps.v_master.outputs.version,
              steps.v_dev.outputs.version,
              github.event.repository.name
            )
          }}
